/*
 * This file is generated by jOOQ.
 */

package edu.java.jooq.publics.tables;


import edu.java.jooq.publics.Public;
import java.util.Collection;
import javax.annotation.processing.Generated;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.19.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class ChatsToLinks extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.chats_to_links</code>
     */
    public static final ChatsToLinks CHATS_TO_LINKS = new ChatsToLinks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.chats_to_links.chat_id</code>.
     */
    public final TableField<Record, Long> CHAT_ID = createField(DSL.name("chat_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.chats_to_links.link_id</code>.
     */
    public final TableField<Record, Long> LINK_ID = createField(DSL.name("link_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private ChatsToLinks(Name alias, Table<Record> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private ChatsToLinks(Name alias, Table<Record> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.chats_to_links</code> table reference
     */
    public ChatsToLinks(String alias) {
        this(DSL.name(alias), CHATS_TO_LINKS);
    }

    /**
     * Create an aliased <code>public.chats_to_links</code> table reference
     */
    public ChatsToLinks(Name alias) {
        this(alias, CHATS_TO_LINKS);
    }

    /**
     * Create a <code>public.chats_to_links</code> table reference
     */
    public ChatsToLinks() {
        this(DSL.name("chats_to_links"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Internal.createUniqueKey(ChatsToLinks.CHATS_TO_LINKS, DSL.name("chats_to_links_pkey"), new TableField[] { ChatsToLinks.CHATS_TO_LINKS.CHAT_ID, ChatsToLinks.CHATS_TO_LINKS.LINK_ID }, true);
    }

    @Override
    public ChatsToLinks as(String alias) {
        return new ChatsToLinks(DSL.name(alias), this);
    }

    @Override
    public ChatsToLinks as(Name alias) {
        return new ChatsToLinks(alias, this);
    }

    @Override
    public ChatsToLinks as(Table<?> alias) {
        return new ChatsToLinks(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatsToLinks rename(String name) {
        return new ChatsToLinks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatsToLinks rename(Name name) {
        return new ChatsToLinks(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ChatsToLinks rename(Table<?> name) {
        return new ChatsToLinks(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChatsToLinks where(Condition condition) {
        return new ChatsToLinks(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChatsToLinks where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChatsToLinks where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChatsToLinks where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChatsToLinks where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChatsToLinks where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChatsToLinks where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public ChatsToLinks where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChatsToLinks whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public ChatsToLinks whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
